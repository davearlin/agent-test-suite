services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agent-evaluator-db
    environment:
      POSTGRES_DB: agent_evaluator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agent-evaluator-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build: ./backend
    container_name: agent-evaluator-backend
    environment:
      - ENVIRONMENT=development
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=agent_evaluator
      - REDIS_URL=redis://redis:6379
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI:-http://localhost:8000/api/v1/auth/google/callback}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      # HOT RELOAD: Mount source code for live development
      - ./backend:/app
      # Exclude Python cache from host (use container's cache)
      - /app/__pycache__
      - /app/app/__pycache__
      # Mount Google Cloud credentials from host (Windows & Linux/Mac compatible)
      - ${APPDATA:-${HOME:-~}}/.config/gcloud:/root/.config/gcloud:ro
      - backend_uploads:/app/uploads
    # HOT RELOAD: Override CMD to enable uvicorn --reload
    command: sh -c "python app/init_db.py && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build: 
      context: ./frontend
      args:
        - VITE_API_BASE_URL=
      # HOT RELOAD: Use development target instead of production build
      target: development
    container_name: agent-evaluator-frontend
    environment:
      - VITE_API_BASE_URL=
      - DOCKER_ENV=true
    volumes:
      # HOT RELOAD: Mount source code for live development
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tsconfig.node.json:/app/tsconfig.node.json
      # Exclude node_modules from host (use container's node_modules)
      - /app/node_modules
    # HOT RELOAD: Override CMD to run Vite dev server
    command: npm run dev -- --host 0.0.0.0 --port 3000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  backend_uploads:
